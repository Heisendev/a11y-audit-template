{"version":3,"sources":["components/pdf/pdf.tsx","components/form/form.tsx","App.js","reportWebVitals.js","index.js"],"names":["styles","StyleSheet","create","page","flexDirection","backgroundColor","section","margin","padding","flexGrow","MyDocument","props","size","style","Object","entries","values","map","key","value","Form","useState","criteriaOpened","openCriteria","normalizeWcagId","id","replace","isPdfDisplayed","displayPDF","formValues","stateValues","criteriaLevels","setCriteriaLevels","handleLevels","level","includes","filter","crit","className","document","fileName","blob","url","loading","error","type","name","checked","onClick","initialValues","onSubmit","setSubmitting","setTimeout","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","wcag","title","guidelines","guideline","ref_id","success_criteria","criteria","index","criterias","critOpen","description","role","aria-labelledby","htmlFor","aria-controls","aria-expanded","criteriaId","hidden","references","ref","href","target","rel","length","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9fd5945e.chunk.js","sourcesContent":["import React from 'react';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\n\n// Create styles\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'row',\n    backgroundColor: '#E4E4E4'\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1\n  }\n});\n\n// Create Document Component\nconst MyDocument = ( props: { values: { [s: string]: unknown; } | ArrayLike<unknown>; }) => {\n  \n  return (\n    <Document>\n      <Page size=\"A4\" style={styles.page}>\n        <View style={styles.section}>\n        <Text>Section #1</Text>\n          {Object.entries(props.values).map(([key, value]) => {\n            return <Text>{`${key}: ${value}`}</Text>\n            \n          }) }\n        </View>\n        <View style={styles.section}>\n          <Text>Section #2</Text>\n        </View>\n      </Page>\n    </Document>\n  );\n}\n\nexport default MyDocument;\n","import React, { useState } from \"react\";\nimport { Field, Formik } from \"formik\";\nimport wcag from 'wcag-as-json/src/wcag.json';\nimport { PDFDownloadLink } from '@react-pdf/renderer';\nimport MyDocument from '../pdf/pdf';\n\nconst Form = (): JSX.Element => {\n\n  const [criteriaOpened, openCriteria] = useState(['']);\n\n  const toggleCriteria = (criteriaId: string) => {\n    if (criteriaOpened.includes(criteriaId)) {\n      openCriteria(criteriaOpened.filter(crit => crit !== criteriaId));\n    } else {\n      openCriteria([...criteriaOpened, criteriaId]);\n    }\n  };\n\n  const normalizeWcagId = (id: string) => {\n    return id.replace(/\\./g, '_');\n  }\n\n  const [isPdfDisplayed, displayPDF] = useState(false);\n  const [formValues, stateValues] = useState({});\n  const [criteriaLevels, setCriteriaLevels] = useState(['A', 'AA', 'AAA'])\n\n  const handleLevels = (level: string) => {\n    if (criteriaLevels.includes(level)) {\n      setCriteriaLevels(criteriaLevels.filter(crit => crit !== level));\n    } else {\n      setCriteriaLevels([...criteriaLevels, level]);\n      }\n  }\n\n  return (\n    <main className=\"main\">\n      { isPdfDisplayed ?\n          <PDFDownloadLink document={<MyDocument values={formValues} />} fileName=\"somename.pdf\">\n            {({ blob, url, loading, error }) =>\n              loading ? 'Loading document...' : 'Download now!'\n            }\n          </PDFDownloadLink>\n        :\n        <div>\n          <fieldset className=\"wcag-filter\">\n            <legend>\n              WCAG Level filter\n            </legend>\n            <label>\n              <input type=\"checkbox\" id=\"A\" name=\"criteria-level\" checked={criteriaLevels.includes('A')} onClick={() => handleLevels('A')} />\n              A\n            </label>\n            <label>\n              <input type=\"checkbox\" id=\"AA\" name=\"criteria-level\" checked={criteriaLevels.includes('AA')} onClick={() => handleLevels('AA')} />\n              AA\n            </label>\n            <label>\n              <input type=\"checkbox\" id=\"AAA\" name=\"criteria-level\" checked={criteriaLevels.includes('AAA')} onClick={() => handleLevels('AAA')} />\n              AAA\n            </label>\n          </fieldset>\n\n          <Formik\n            initialValues={{} as { [s: string]: unknown; }}\n            onSubmit={(values, { setSubmitting }) => {\n              setTimeout(() => {\n                stateValues(values);\n                displayPDF(true);\n                setSubmitting(false);\n              }, 400);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting,\n            }) => (\n              <form onSubmit={handleSubmit}>\n                {wcag.map(wcag => {\n                  return (\n                    <div key={wcag.ref_id}>\n                      <h2>{wcag.title}</h2>\n                      {\n                        wcag.guidelines.map(guideline => {\n                          return (\n                            <div key={guideline.ref_id} className=\"guideline\">\n                              <h3>{guideline.ref_id} {guideline.title}</h3>\n                              {guideline.success_criteria.map((criteria, index, criterias) => {\n                                if (criteriaLevels.includes(criteria.level)) {\n                                  const critOpen = criteriaOpened.includes(`more-${criteria.ref_id}`)\n                                  return (\n                                    <div key={criteria.ref_id}>\n                                      <h4 id={`criteria-${criteria.ref_id}`}>{`${criteria.ref_id}: Level ${criteria.level} - ${criteria.title}`}</h4>\n                                      <div className=\"criteria-description\">{criteria.description}</div>\n                                      <div role=\"group\" aria-labelledby={`criteria-${criteria.ref_id}`}>\n                                        <label>\n                                          <Field type=\"radio\" name={normalizeWcagId(criteria.ref_id)} value=\"success\" />\n                                          Success\n                                        </label>\n                                        <label>\n                                          <Field type=\"radio\" name={normalizeWcagId(criteria.ref_id)} value=\"failed\" />\n                                            Failed\n                                        </label>\n                                        <div>\n                                          <label htmlFor={`comment-${normalizeWcagId(criteria.ref_id)}`}>Comment</label>\n                                            <Field\n                                              type=\"textarea\"\n                                              name={`comment-${normalizeWcagId(criteria.ref_id)}`}\n                                              id={`comment-${normalizeWcagId(criteria.ref_id)}`} />\n                                        </div>\n                                      </div>\n                                      <button\n                                        type=\"button\"\n                                        aria-controls={`more-${criteria.ref_id}`}\n                                        aria-expanded={critOpen ? 'true' : 'false'}\n                                        className=\"accordion-header\"\n                                        onClick={() => toggleCriteria(`more-${criteria.ref_id}`)}> See how to acheive criteria </button>\n                                      <div id={`more-${criteria.ref_id}`} role=\"region\" className=\"accordion-panel\" hidden={critOpen ? false : true}>\n                                        {criteria.references.map((ref: { url?: string | undefined; title: string; }, index: number) => {\n                                          return ref.url ? (<div key={index}><a href={ref.url} target=\"_blank\" rel=\"noreferrer\">{ref.title}</a></div>) : null;\n                                        })}\n                                      </div>\n                                      {(index !== criterias.length - 1) && <hr />}\n                                    </div>\n                                  )\n                                } else {\n                                  return null;\n                                }\n                                \n                              })}\n                            </div>\n                          )\n                        })\n                      }\n                    </div>\n                  )\n                })}\n                <button type=\"submit\" disabled={isSubmitting}>\n                  Generate report PDF\n            </button>\n              </form>\n            )}\n          </Formik>\n        </div>}\n    </main>\n  )\n};\n\nexport default Form;\n","import './App.css';\n\nimport Form from './components/form/form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>A11y audit tool</h1>\n        <nav></nav>\n      </header>\n      <Form />\n      <footer>\n        footer\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}